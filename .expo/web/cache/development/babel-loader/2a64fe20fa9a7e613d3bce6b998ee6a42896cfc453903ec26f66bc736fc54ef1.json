{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar RNEncryptedStorage = NativeModules.RNEncryptedStorage;\nif (!RNEncryptedStorage) {\n  throw new Error('RNEncryptedStorage is undefined');\n}\nvar EncryptedStorage = function () {\n  function EncryptedStorage() {\n    _classCallCheck(this, EncryptedStorage);\n  }\n  _createClass(EncryptedStorage, null, [{\n    key: \"setItem\",\n    value: function setItem(key, value, cb) {\n      if (cb) {\n        RNEncryptedStorage.setItem(key, value).then(cb).catch(cb);\n        return;\n      }\n      return RNEncryptedStorage.setItem(key, value);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key, cb) {\n      if (cb) {\n        RNEncryptedStorage.getItem(key).then(cb).catch(cb);\n        return;\n      }\n      return RNEncryptedStorage.getItem(key);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key, cb) {\n      if (cb) {\n        RNEncryptedStorage.removeItem(key).then(cb).catch(cb);\n        return;\n      }\n      return RNEncryptedStorage.removeItem(key);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(cb) {\n      if (cb) {\n        RNEncryptedStorage.clear().then(cb).catch(cb);\n        return;\n      }\n      return RNEncryptedStorage.clear();\n    }\n  }]);\n  return EncryptedStorage;\n}();\nexport { EncryptedStorage as default };","map":{"version":3,"names":["RNEncryptedStorage","NativeModules","Error","EncryptedStorage","_classCallCheck","_createClass","key","value","setItem","cb","then","catch","getItem","removeItem","clear","default"],"sources":["C:\\Users\\oscar\\Desktop\\proyecto\\2005\\FrontEnd_EA_app\\my-project\\node_modules\\react-native-encrypted-storage\\lib\\module\\EncryptedStorage.ts"],"sourcesContent":["/* eslint-disable no-dupe-class-members */\n\nimport { NativeModules } from 'react-native';\nconst { RNEncryptedStorage } = NativeModules;\n\nif (!RNEncryptedStorage) {\n  throw new Error('RNEncryptedStorage is undefined');\n}\n\nexport type StorageErrorCallback = (error?: Error) => void;\nexport type StorageValueCallback = (error?: Error, value?: string) => void;\n\nexport default class EncryptedStorage {\n  /**\n   * Writes data to the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that will be associated to the value for later retrieval.\n   * @param {string} value - The data to store.\n   */\n  static setItem(key: string, value: string): Promise<void>;\n\n  /**\n   * Writes data to the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that will be associated to the value for later retrieval.\n   * @param {string} value - The data to store.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static setItem(key: string, value: string, cb: StorageErrorCallback): void;\n  static setItem(\n    key: string,\n    value: string,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.setItem(key, value).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.setItem(key, value);\n  }\n\n  /**\n   * Retrieves data from the disk, using SharedPreferences or KeyChain, depending on the platform and returns it as the specified type.\n   * @param {string} key - A string that is associated to a value.\n   */\n  static getItem(key: string): Promise<string | null>;\n\n  /**\n   * Retrieves data from the disk, using SharedPreferences or KeyChain, depending on the platform and returns it as the specified type.\n   * @param {string} key - A string that is associated to a value.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static getItem(key: string, cb: StorageValueCallback): void;\n  static getItem(\n    key: string,\n    cb?: StorageValueCallback\n  ): void | Promise<string | null> {\n    if (cb) {\n      RNEncryptedStorage.getItem(key).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.getItem(key);\n  }\n\n  /**\n   * Deletes data from the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that is associated to a value.\n   */\n  static removeItem(key: string): Promise<void>;\n\n  /**\n   * Deletes data from the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that is associated to a value.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static removeItem(key: string, cb: StorageErrorCallback): void;\n  static removeItem(\n    key: string,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.removeItem(key).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.removeItem(key);\n  }\n\n  /**\n   * Clears all data from disk, using SharedPreferences or KeyChain, depending on the platform.\n   */\n  static clear(): Promise<void>;\n\n  /**\n   * Clears all data from disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static clear(cb: StorageErrorCallback): void;\n  static clear(cb?: StorageErrorCallback): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.clear().then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.clear();\n  }\n}\n"],"mappings":";;;AAGA,IAAQA,kBAAA,GAAuBC,aAAa,CAApCD,kBAAA;AAER,IAAI,CAACA,kBAAkB,EAAE;EACvB,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;AACpD;AAAA,IAKqBC,gBAAgB;EAAA,SAAAA,iBAAA;IAAAC,eAAA,OAAAD,gBAAA;EAAA;EAAAE,YAAA,CAAAF,gBAAA;IAAAG,GAAA;IAAAC,KAAA,EAenC,SAAAC,QACEF,GAAW,EACXC,KAAa,EACbE,EAAyB,EACH;MACtB,IAAIA,EAAE,EAAE;QACNT,kBAAkB,CAACQ,OAAO,CAACF,GAAG,EAAEC,KAAK,CAAC,CAACG,IAAI,CAACD,EAAE,CAAC,CAACE,KAAK,CAACF,EAAE,CAAC;QACzD;MACF;MAEA,OAAOT,kBAAkB,CAACQ,OAAO,CAACF,GAAG,EAAEC,KAAK,CAAC;IAC/C;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAcA,SAAAK,QACEN,GAAW,EACXG,EAAyB,EACM;MAC/B,IAAIA,EAAE,EAAE;QACNT,kBAAkB,CAACY,OAAO,CAACN,GAAG,CAAC,CAACI,IAAI,CAACD,EAAE,CAAC,CAACE,KAAK,CAACF,EAAE,CAAC;QAClD;MACF;MAEA,OAAOT,kBAAkB,CAACY,OAAO,CAACN,GAAG,CAAC;IACxC;EAAA;IAAAA,GAAA;IAAAC,KAAA,EAcA,SAAAM,WACEP,GAAW,EACXG,EAAyB,EACH;MACtB,IAAIA,EAAE,EAAE;QACNT,kBAAkB,CAACa,UAAU,CAACP,GAAG,CAAC,CAACI,IAAI,CAACD,EAAE,CAAC,CAACE,KAAK,CAACF,EAAE,CAAC;QACrD;MACF;MAEA,OAAOT,kBAAkB,CAACa,UAAU,CAACP,GAAG,CAAC;IAC3C;EAAA;IAAAA,GAAA;IAAAC,KAAA,EAYA,SAAAO,MAAaL,EAAyB,EAAwB;MAC5D,IAAIA,EAAE,EAAE;QACNT,kBAAkB,CAACc,KAAK,EAAE,CAACJ,IAAI,CAACD,EAAE,CAAC,CAACE,KAAK,CAACF,EAAE,CAAC;QAC7C;MACF;MAEA,OAAOT,kBAAkB,CAACc,KAAK,EAAE;IACnC;EAAA;EAAA,OAAAX,gBAAA;AAAA;AAAA,SA7FmBA,gBAAgB,IAAAY,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}