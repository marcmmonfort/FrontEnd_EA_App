{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport React, { useEffect, useState } from \"react\";\nimport MainContainer from \"../components/containers/Main\";\nimport Title from \"../components/texts/Title\";\nimport SubTitle from \"../components/texts/Subtitle\";\nimport StyledTextInputs from \"../components/inputs/StyledTextInputs\";\nimport ButtonGradient from \"../components/buttons/ButtonGradient\";\nimport { SessionService } from \"../../services/user/session.service\";\nimport NormalText from \"../components/texts/NormalText\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Register from \"../components/texts/Register\";\nimport * as Font from 'expo-font';\nimport \"../../../../assets/fonts/Rafaella.ttf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction loadFonts() {\n  return _loadFonts.apply(this, arguments);\n}\nfunction _loadFonts() {\n  _loadFonts = _asyncToGenerator(function* () {\n    yield Font.loadAsync({\n      'Rafaella': require(\"../../../../assets/fonts/Rafaella.ttf\")\n    });\n  });\n  return _loadFonts.apply(this, arguments);\n}\nexport default function LoginScreen() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  useEffect(function () {\n    loadFonts().then(function () {\n      setFontsLoaded(true);\n    });\n  }, []);\n  var navigation = useNavigation();\n  var customFont = Platform.select({\n    ios: 'Rafaella',\n    android: 'Rafaella-Regular'\n  });\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    inputEmail = _useState4[0],\n    setInputEmail = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputPassword = _useState6[0],\n    setInputPassword = _useState6[1];\n  var styles = StyleSheet.create({\n    text_normal: {\n      color: 'white',\n      fontFamily: customFont,\n      fontSize: 20,\n      marginBottom: 10\n    }\n  });\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsxs(MainContainer, {\n    children: [_jsx(Title, {\n      style: styles.text_normal,\n      children: \"Lplan\"\n    }), _jsx(SubTitle, {\n      children: \"Let's Go!\"\n    }), _jsx(StyledTextInputs, {\n      placeholder: \"mail\",\n      value: inputEmail,\n      onChangeText: setInputEmail\n    }), _jsx(StyledTextInputs, {\n      placeholder: \"Password\",\n      value: inputPassword,\n      onChangeText: setInputPassword,\n      secureTextEntry: true\n    }), _jsx(ButtonGradient, {\n      onPress: function onPress() {\n        var formData = {\n          mailUser: inputEmail,\n          passwordUser: inputPassword\n        };\n        console.log(\"formData \" + formData.mailUser);\n        console.log(\"formData \" + formData.passwordUser);\n        SessionService.login(formData).then(function (response) {\n          console.log(response);\n          if (response.status === 200) {\n            console.log(response.data);\n            SessionService.setCurrentUser(JSON.stringify(response.data.user.uuid), JSON.stringify(response.data.token));\n            console.log(\"_id\" + JSON.stringify(response.data.user.uuid));\n            console.log(\"token\" + JSON.stringify(response.data.token));\n            console.log(\"Login Succesfull!\");\n            navigation.navigate('HomeScreen');\n          }\n        }).catch(function (error) {\n          console.error(\"error: \" + error);\n          console.log(\"error.response: \" + error.response);\n          switch (error.response.status) {\n            case 403:\n              console.log(\"Incorrect Password\");\n              break;\n            case 404:\n              console.log(\"User does not exist\");\n              navigation.navigate(\"Register\");\n              break;\n          }\n        });\n      }\n    }), _jsx(NormalText, {\n      children: \"Aren't you still an @lplan member?\"\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate(\"Register\");\n      },\n      children: _jsx(Register, {\n        children: \"Sign Up!\"\n      })\n    }), _jsx(StatusBar, {})]\n  });\n}","map":{"version":3,"names":["useNavigation","React","useEffect","useState","MainContainer","Title","SubTitle","StyledTextInputs","ButtonGradient","SessionService","NormalText","Platform","StatusBar","TouchableOpacity","StyleSheet","Register","Font","jsx","_jsx","jsxs","_jsxs","loadFonts","_loadFonts","apply","arguments","_asyncToGenerator","loadAsync","require","LoginScreen","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","then","navigation","customFont","select","ios","android","_useState3","_useState4","inputEmail","setInputEmail","_useState5","_useState6","inputPassword","setInputPassword","styles","create","text_normal","color","fontFamily","fontSize","marginBottom","children","style","placeholder","value","onChangeText","secureTextEntry","onPress","formData","mailUser","passwordUser","console","log","login","response","status","data","setCurrentUser","JSON","stringify","user","uuid","token","navigate","catch","error"],"sources":["C:/Users/eloim/OneDrive/Uni/4B/EA/ProyectoEA/Frontend_/FrontEnd_EA_App/src/infrastructure/UI/screens/login.screen.tsx"],"sourcesContent":["import { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Svg, { Defs, Path, Pattern, Use, Image } from \"react-native-svg\";\r\nimport MainContainer from \"../components/containers/Main\";\r\nimport Title from \"../components/texts/Title\";\r\nimport SubTitle from \"../components/texts/Subtitle\";\r\nimport StyledTextInputs from \"../components/inputs/StyledTextInputs\";\r\nimport ButtonGradient from \"../components/buttons/ButtonGradient\";\r\nimport { AuthEntity } from \"../../../domain/user/user.entity\";\r\nimport { SessionService } from \"../../services/user/session.service\";\r\nimport NormalText from \"../components/texts/NormalText\";\r\nimport { Platform, StatusBar, TouchableOpacity, StyleSheet } from \"react-native\";\r\nimport Register from \"../components/texts/Register\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport * as Font from 'expo-font';\r\nimport '../../../../assets/fonts/Rafaella.ttf';\r\n\r\nasync function loadFonts() {\r\n  await Font.loadAsync({\r\n    'Rafaella': require('../../../../assets/fonts/Rafaella.ttf'),\r\n  });\r\n}\r\n\r\nexport default function LoginScreen() {\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadFonts().then(() => {\r\n      setFontsLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const customFont = Platform.select({\r\n    ios: 'Rafaella',\r\n    android: 'Rafaella-Regular',\r\n  });\r\n\r\n  const [inputEmail, setInputEmail] = useState(\"\");\r\n  const [inputPassword, setInputPassword] = useState(\"\");\r\n\r\n  const styles = StyleSheet.create({\r\n    text_normal: {\r\n      color: 'white',\r\n      fontFamily: customFont,\r\n      fontSize: 20,\r\n      marginBottom: 10,\r\n    },\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    // Muestra un componente de carga mientras se cargan las fuentes\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MainContainer>\r\n      <Title style={styles.text_normal}>Lplan</Title>\r\n      <SubTitle>Let's Go!</SubTitle>\r\n      <StyledTextInputs\r\n        placeholder=\"mail\"\r\n        value={inputEmail}\r\n        onChangeText={setInputEmail}\r\n      />\r\n      <StyledTextInputs\r\n        placeholder=\"Password\"\r\n        value={inputPassword}\r\n        onChangeText={setInputPassword}\r\n        secureTextEntry={true}\r\n      />\r\n      <ButtonGradient\r\n        onPress={() => {\r\n          const formData: AuthEntity = {\r\n            mailUser: inputEmail,\r\n            passwordUser: inputPassword,\r\n          };\r\n\r\n          console.log(\"formData \" + formData.mailUser);\r\n          console.log(\"formData \" + formData.passwordUser);\r\n          SessionService.login(formData)\r\n            .then((response) => {\r\n              console.log(response);\r\n              if (response.status === 200) {\r\n                console.log(response.data);\r\n                SessionService.setCurrentUser(\r\n                  JSON.stringify(response.data.user.uuid),\r\n                  JSON.stringify(response.data.token)\r\n                );\r\n                console.log(\"_id\" + JSON.stringify(response.data.user.uuid));\r\n                console.log(\"token\" + JSON.stringify(response.data.token));\r\n                console.log(\"Login Succesfull!\");\r\n\r\n                navigation.navigate('HomeScreen' as never);\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"error: \" + error);\r\n              console.log(\"error.response: \" + error.response);\r\n              switch (error.response.status) {\r\n                case 403:\r\n                  // Poner aquí el alert ...\r\n                  console.log(\"Incorrect Password\");\r\n\r\n                  break;\r\n                case 404:\r\n                  // Poner aquí el alert ...\r\n                  console.log(\"User does not exist\");\r\n                  navigation.navigate(\"Register\" as never);\r\n                  break;\r\n              }\r\n            });\r\n        }}\r\n      />\r\n      <NormalText>Aren't you still an @lplan member?</NormalText>\r\n      <TouchableOpacity\r\n        onPress={() => navigation.navigate(\"Register\" as never)}\r\n      >\r\n        <Register>Sign Up!</Register>\r\n      </TouchableOpacity>\r\n      <StatusBar />\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\n/*\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Svg, { Defs, Path, Pattern, Use, Image } from \"react-native-svg\";\r\nimport MainContainer from \"../components/containers/Main\";\r\nimport Title from \"../components/texts/Title\";\r\nimport SubTitle from \"../components/texts/Subtitle\";\r\nimport StyledTextInputs from \"../components/inputs/StyledTextInputs\";\r\nimport ButtonGradient from \"../components/buttons/ButtonGradient\";\r\nimport { AuthEntity } from \"../../../domain/user/user.entity\";\r\nimport { SessionService } from \"../../services/user/session.service\";\r\nimport NormalText from \"../components/texts/NormalText\";\r\nimport { Platform, StatusBar, TouchableOpacity, StyleSheet } from \"react-native\";\r\nimport Register from \"../components/texts/Register\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport * as Font from 'expo-font';\r\n\r\nasync function loadFonts() {\r\n  await Font.loadAsync({\r\n    'Rafaella': require('../../../../assets/fonts/Rafaella.ttf'),\r\n  });\r\n}\r\n\r\nexport default function LoginScreen() {\r\n  useEffect(() => {\r\n    loadFonts();\r\n  }, []);\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const customFont = Platform.select({\r\n    ios: 'Rafaella',\r\n    android: 'Rafaella-Regular',\r\n  });\r\n\r\n  const [inputEmail, setInputEmail] = useState(\"\");\r\n  const [inputPassword, setInputPassword] = useState(\"\");\r\n\r\n  const styles = StyleSheet.create({\r\n    text_normal: {\r\n      color: 'white',\r\n      fontFamily: customFont,\r\n      fontSize: 20,\r\n      marginBottom: 10,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <MainContainer>\r\n      <Title style={styles.text_normal}>Lplan</Title>\r\n      <SubTitle>Let's Go!</SubTitle>\r\n      <StyledTextInputs\r\n        placeholder=\"mail\"\r\n        value={inputEmail}\r\n        onChangeText={setInputEmail}\r\n      />\r\n      <StyledTextInputs\r\n        placeholder=\"Password\"\r\n        value={inputPassword}\r\n        onChangeText={setInputPassword}\r\n        secureTextEntry={true}\r\n      />\r\n      <ButtonGradient\r\n        onPress={() => {\r\n          const formData: AuthEntity = {\r\n            mailUser: inputEmail,\r\n            passwordUser: inputPassword,\r\n          };\r\n\r\n          console.log(\"formData \" + formData.mailUser);\r\n          console.log(\"formData \" + formData.passwordUser);\r\n          SessionService.login(formData)\r\n            .then((response) => {\r\n              console.log(response);\r\n              if (response.status === 200) {\r\n                console.log(response.data);\r\n                SessionService.setCurrentUser(\r\n                  JSON.stringify(response.data.user.uuid),\r\n                  JSON.stringify(response.data.token)\r\n                );\r\n                console.log(\"_id\" + JSON.stringify(response.data.user.uuid));\r\n                console.log(\"token\" + JSON.stringify(response.data.token));\r\n                console.log(\"Login Succesfull!\");\r\n\r\n                navigation.navigate('HomeScreen' as never);\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"error: \" + error);\r\n              console.log(\"error.response: \" + error.response);\r\n              switch (error.response.status) {\r\n                case 403:\r\n                  // Poner aquí el alert ...\r\n                  console.log(\"Incorrect Password\");\r\n\r\n                  break;\r\n                case 404:\r\n                  // Poner aquí el alert ...\r\n                  console.log(\"User does not exist\");\r\n                  navigation.navigate(\"Register\" as never);\r\n                  break;\r\n              }\r\n            });\r\n        }}\r\n      />\r\n      <NormalText>Aren't you still an @lplan member?</NormalText>\r\n      <TouchableOpacity\r\n        onPress={() => navigation.navigate(\"Register\" as never)}\r\n      >\r\n        <Register>Sign Up!</Register>\r\n      </TouchableOpacity>\r\n      <StatusBar />\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}