{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useState, useEffect } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { ActivityService } from \"../../services/activity/activity.service\";\nimport { SessionService } from \"../../services/user/session.service\";\nimport React from \"react\";\nimport CalendarScreen from \"../components/calendar/calendar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction CalendarEventsScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    activities = _useState2[0],\n    setActivities = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentUser = _useState4[0],\n    setCurrentUser = _useState4[1];\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var userId = yield SessionService.getCurrentUser();\n        setCurrentUser(userId);\n        if (userId) {\n          var currentDate = new Date();\n          currentDate.setHours(0, 0, 0, 0);\n          console.log(currentDate);\n          var date = currentDate.toString();\n          var myScheduleResponse = yield ActivityService.getMySchedule(userId, date);\n          console.log(myScheduleResponse);\n          if (myScheduleResponse) {\n            setActivities(myScheduleResponse.data);\n          }\n        }\n      });\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, []);\n  return _jsx(ImageBackground, {\n    source: require(\"../../../../assets/visualcontent/background_8.png\"),\n    style: styles.backgroundImage,\n    children: _jsx(SafeAreaView, {\n      style: styles.container,\n      children: _jsx(CalendarScreen, {\n        activities: activities,\n        uuid: currentUser\n      })\n    })\n  });\n}\n;\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n    resizeMode: 'cover'\n  },\n  container: {\n    flex: 1\n  },\n  eventoContainer: {\n    backgroundColor: 'lightblue',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  },\n  eventoText: {\n    fontSize: 16\n  }\n});\nexport default CalendarEventsScreen;","map":{"version":3,"names":["useState","useEffect","SafeAreaView","ActivityService","SessionService","React","CalendarScreen","jsx","_jsx","CalendarEventsScreen","_useState","_useState2","_slicedToArray","activities","setActivities","_useState3","_useState4","currentUser","setCurrentUser","fetchData","_ref","_asyncToGenerator","userId","getCurrentUser","currentDate","Date","setHours","console","log","date","toString","myScheduleResponse","getMySchedule","data","apply","arguments","ImageBackground","source","require","style","styles","backgroundImage","children","container","uuid","StyleSheet","create","flex","resizeMode","eventoContainer","backgroundColor","borderRadius","padding","marginBottom","eventoText","fontSize"],"sources":["C:/Users/eloim/Uni/ProyectoEA/Frontend_/FrontEnd_EA_App/src/infrastructure/UI/screens/calendarevents.screen.tsx"],"sourcesContent":["import { View, Text, ImageBackground, StyleSheet } from \"react-native\";\r\nimport { useState, useEffect } from 'react';\r\nimport { SafeAreaView } from 'react-native';\r\nimport { ActivityService } from \"../../services/activity/activity.service\";\r\nimport { Activity } from \"../../../domain/activity/activity.entity\";\r\nimport { SessionService } from \"../../services/user/session.service\";\r\nimport React from \"react\";\r\nimport Agenda from \"../components/calendar/calendar\";\r\nimport CalendarScreen from \"../components/calendar/calendar\";\r\n\r\n\r\nfunction CalendarEventsScreen() {\r\n  const [activities, setActivities] = useState<Activity[]>([]);\r\n  const [currentUser, setCurrentUser] = useState<string>(\"\"); \r\n\r\n  useEffect(() => {\r\n    //Obtenemos el usuario que ha iniciado sesiÃ³n en la app\r\n    \r\n    const fetchData = async () => {\r\n      const userId = await SessionService.getCurrentUser();\r\n      setCurrentUser(userId);\r\n      \r\n      if(userId){\r\n        const currentDate = new Date();\r\n        currentDate.setHours(0, 0, 0, 0);\r\n        console.log(currentDate);\r\n        const date = currentDate.toString();\r\n        const myScheduleResponse = await ActivityService.getMySchedule(userId, date);\r\n        console.log(myScheduleResponse);\r\n        if(myScheduleResponse){\r\n          setActivities(myScheduleResponse.data);\r\n        }\r\n      }\r\n      \r\n    }\r\n    fetchData();\r\n    \r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <ImageBackground source={require('../../../../assets/visualcontent/background_8.png')} style={styles.backgroundImage}>\r\n      <SafeAreaView style={styles.container}>\r\n        <CalendarScreen activities={activities} uuid={currentUser}/>\r\n      </SafeAreaView>\r\n    </ImageBackground>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  backgroundImage: {\r\n    flex: 1,\r\n    resizeMode: 'cover',\r\n  },\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  eventoContainer: {\r\n    backgroundColor: 'lightblue',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  },\r\n  eventoText: {\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default CalendarEventsScreen;\r\n"],"mappings":";;;;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,YAAA;AAE5C,SAASC,eAAe;AAExB,SAASC,cAAc;AACvB,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,cAAc;AAAwC,SAAAC,GAAA,IAAAC,IAAA;AAG7D,SAASC,oBAAoBA,CAAA,EAAG;EAC9B,IAAAC,SAAA,GAAoCV,QAAQ,CAAa,EAAE,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArDG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,UAAA,GAAsCf,QAAQ,CAAS,EAAE,CAAC;IAAAgB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAnDE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAElCf,SAAS,CAAC,YAAM;IAGd,IAAMkB,SAAS;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC5B,IAAMC,MAAM,SAASlB,cAAc,CAACmB,cAAc,CAAC,CAAC;QACpDL,cAAc,CAACI,MAAM,CAAC;QAEtB,IAAGA,MAAM,EAAC;UACR,IAAME,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;UAC9BD,WAAW,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAChCC,OAAO,CAACC,GAAG,CAACJ,WAAW,CAAC;UACxB,IAAMK,IAAI,GAAGL,WAAW,CAACM,QAAQ,CAAC,CAAC;UACnC,IAAMC,kBAAkB,SAAS5B,eAAe,CAAC6B,aAAa,CAACV,MAAM,EAAEO,IAAI,CAAC;UAC5EF,OAAO,CAACC,GAAG,CAACG,kBAAkB,CAAC;UAC/B,IAAGA,kBAAkB,EAAC;YACpBjB,aAAa,CAACiB,kBAAkB,CAACE,IAAI,CAAC;UACxC;QACF;MAEF,CAAC;MAAA,gBAhBKd,SAASA,CAAA;QAAA,OAAAC,IAAA,CAAAc,KAAA,OAAAC,SAAA;MAAA;IAAA,GAgBd;IACDhB,SAAS,CAAC,CAAC;EAEb,CAAC,EAAE,EAAE,CAAC;EAGN,OACEX,IAAA,CAAC4B,eAAe;IAACC,MAAM,EAAEC,OAAO,oDAAoD,CAAE;IAACC,KAAK,EAAEC,MAAM,CAACC,eAAgB;IAAAC,QAAA,EACnHlC,IAAA,CAACN,YAAY;MAACqC,KAAK,EAAEC,MAAM,CAACG,SAAU;MAAAD,QAAA,EACpClC,IAAA,CAACF,cAAc;QAACO,UAAU,EAAEA,UAAW;QAAC+B,IAAI,EAAE3B;MAAY,CAAC;IAAC,CAChD;EAAC,CACA,CAAC;AAEtB;AAAC;AAED,IAAMuB,MAAM,GAAGK,UAAU,CAACC,MAAM,CAAC;EAC/BL,eAAe,EAAE;IACfM,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE;EACd,CAAC;EACDL,SAAS,EAAE;IACTI,IAAI,EAAE;EACR,CAAC;EACDE,eAAe,EAAE;IACfC,eAAe,EAAE,WAAW;IAC5BC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE;EAChB,CAAC;EACDC,UAAU,EAAE;IACVC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,eAAe9C,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}