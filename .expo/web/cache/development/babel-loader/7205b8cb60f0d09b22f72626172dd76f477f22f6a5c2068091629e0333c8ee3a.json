{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport * as Font from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Button_Type_1 = function Button_Type_1(_ref) {\n  var onPress = _ref.onPress,\n    containerStyle = _ref.containerStyle,\n    buttonStyle = _ref.buttonStyle,\n    textStyle = _ref.textStyle;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  useEffect(function () {\n    function loadFonts() {\n      return _loadFonts.apply(this, arguments);\n    }\n    function _loadFonts() {\n      _loadFonts = _asyncToGenerator(function* () {\n        yield Font.loadAsync({\n          'Rafaella': require(\"../../../../../assets/fonts/Rafaella.ttf\"),\n          'SFNS': require(\"../../../../../assets/fonts/SFNS.otf\")\n        });\n      });\n      return _loadFonts.apply(this, arguments);\n    }\n    loadFonts().then(function () {\n      setFontsLoaded(true);\n    });\n  }, []);\n  var titleFont = Platform.select({\n    ios: 'Rafaella',\n    android: 'Rafaella'\n  });\n  var bodyFont = Platform.select({\n    ios: 'SFNS',\n    android: 'SFNS'\n  });\n  var styles = StyleSheet.create({\n    container: {\n      width: 200,\n      alignItems: 'center',\n      marginTop: 50\n    },\n    button: {\n      marginTop: -30,\n      height: 38,\n      width: 120,\n      borderRadius: 50,\n      padding: 10,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    text: {\n      fontFamily: bodyFont,\n      fontWeight: 'bold',\n      fontSize: 18,\n      color: 'black'\n    }\n  });\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(TouchableOpacity, {\n    style: [styles.container, containerStyle],\n    onPress: onPress,\n    children: _jsx(LinearGradient, {\n      colors: ['#66fcf1', '#66fcf1'],\n      start: {\n        x: 1,\n        y: 0\n      },\n      end: {\n        x: 0,\n        y: 1\n      },\n      style: [styles.button, buttonStyle],\n      children: _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: \"LogIn\"\n      })\n    })\n  });\n};\nexport default Button_Type_1;","map":{"version":3,"names":["React","useEffect","useState","StyleSheet","Text","TouchableOpacity","Platform","LinearGradient","Font","jsx","_jsx","Button_Type_1","_ref","onPress","containerStyle","buttonStyle","textStyle","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","loadFonts","_loadFonts","apply","arguments","_asyncToGenerator","loadAsync","require","then","titleFont","select","ios","android","bodyFont","styles","create","container","width","alignItems","marginTop","button","height","borderRadius","padding","justifyContent","text","fontFamily","fontWeight","fontSize","color","style","children","colors","start","x","y","end"],"sources":["C:/Users/oscar/Desktop/proyecto/2005/FrontEnd_EA_app/my-project/src/infrastructure/UI/components/buttons/Button_Type_1.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity, Platform } from 'react-native';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { ButtonGradientProps } from './Types';\r\n\r\nimport * as Font from 'expo-font';\r\n\r\nconst Button_Type_1 = ({ onPress, containerStyle, buttonStyle, textStyle }: ButtonGradientProps) => {\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function loadFonts() {\r\n      await Font.loadAsync({\r\n        'Rafaella': require('../../../../../assets/fonts/Rafaella.ttf'),\r\n        'SFNS': require('../../../../../assets/fonts/SFNS.otf'),\r\n      });\r\n    }\r\n\r\n    loadFonts().then(() => {\r\n      setFontsLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  const titleFont = Platform.select({\r\n    ios: 'Rafaella',\r\n    android: 'Rafaella',\r\n  });\r\n  const bodyFont = Platform.select({\r\n    ios: 'SFNS',\r\n    android: 'SFNS',\r\n  });\r\n\r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      width: 200,\r\n      alignItems: 'center',\r\n      marginTop: 50,\r\n    },\r\n    button: {\r\n      marginTop: -30,\r\n      height: 38,\r\n      width: 120,\r\n      borderRadius: 50,\r\n      padding: 10,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    text: {\r\n      fontFamily: bodyFont,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n      color: 'black',\r\n    },\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <TouchableOpacity style={[styles.container, containerStyle]} onPress={onPress}>\r\n      <LinearGradient colors={['#66fcf1', '#66fcf1']} start={{ x: 1, y: 0 }} end={{ x: 0, y: 1 }} style={[styles.button, buttonStyle]}>\r\n        <Text style={[styles.text, textStyle]}>LogIn</Text>\r\n      </LinearGradient>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nexport defaultÂ Button_Type_1;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}